https://appdividend.com/2018/11/04/angular-7-crud-example-mean-stack-tutorial/
https://app.pluralsight.com/library/courses/typescript/table-of-contents         // typescript tutorial
https://getbootstrap.com/docs/4.0/components/alerts/                             // bootstrap alerts     

https://www.jquery-az.com/bootstrap4/demo.php?ex=77.0_2                          //footer example
https://www.jquery-az.com/4-templates-bootstrap-footer-use-projects/             //footer example

https://www.codeply.com/go/kTGlK9Axdk/bootstrap-4-navbar-center-links-examples //place brand at middle of the header.

https://www.intersysconsulting.com/blog/angular-components/
https://www.youtube.com/watch?v=cPNTKy1Lq9s

1) what is angualr CLI?
ans) it is commanlinf line interface tools to Initialize,develop and maintain angualr applications.
we can invoke angualr CLI tools from command line

2) what is the command to install angualar CLI/
ans)
npm install -g @angular/cli

3)how to uninstall older version of angular cli?
ans)
npm uninstall -g @angular/cli

4)if you have any questions on angualr CLI command where to check?
ans)
ng help
ng generate --help

here generate is command and --help will give details like why generate command is used.

5) how to create a new angular project using angualar CLI?
ans)
ng new my-first-project --skip-git
cd my-first-project


6)how to start angular server?
ans)
ng serve -o

first you create project. then you change directory to your project and then you will start the server.

7) by default what port will project created by angular run?
ans)
http://localhost:4200/


8)which version of angular are you using in your project? what are some old verisons of angular? how to check which version your angular is?
ans)
angular 7.  angualr 1.2, angualr 1.4, angualr 2.
But i know only angular 7.

ng --version

9)where is the source code for first page, you see in browser, when you first start server?
ans) <projectname>/src/app/app.component.html

10)how to create a new component in angularjs?
ans)
ng g c userreg --spec=false

11)how to install other things that angualar wants like bootstrap css framework or some other js framework?
ans) use npm just like we use for other JS framworks like reactjs.
npm install bootstrap --save


12)how to add new css file into angualr js project?
ans) add inside angualar.json file in your project directory.

"styles": [
   "src/styles.css",
   "node_modules/bootstrap/dist/css/bootstrap.min.css"
 ],

13)when you create a new compnent say "ng g c userreg --spec=false" what files will be created aby angular cli? Also explain what is the purpose of each file.
asn)
inside "<projectname>/src/app/" folder it will create a new folder named "userreg" with three files 
a)userreg.component.css    //for styles
b)userreg.component.html  //for html code
c)userreg.component.ts    //for javascript/typescript code.

14) when you create a new component? will this new component will be added into any configuration details?
asn)
a)
yes the new component will be declared in declrations in "app.module.ts" file. we can see it is imported as shown below
import { UserregComponent } from './userreg/userreg.component';

b)
and declared a shown below.

@NgModule({
  declarations: [
    AppComponent,
    UserregComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

15)so when you first start application we know the first to be shown is "app.component.html". how to add some navigation to that page. so that we can go to other components by clicking a link in navigation?
ans)
well you can just have direct links using link tag "<a>". but you want to use good looking navigation bar. use below.Note that it uses CSS from bootstrap.
so you need to have bootstrap. Also note that fr those links you need to map to component in "app-routing.module.ts


<nav class="navbar navbar-expand-sm bg-light">
  <div class="container-fluid">
    <ul class="navbar-nav">
      <li class="nav-item">
        <a routerLink="register" class="nav-link" routerLinkActive="active">
          Register
        </a>
      </li>
      <li class="nav-item">
        <a routerLink="login" class="nav-link" routerLinkActive="active">
          Login
        </a>
      </li> 
    </ul>
  </div>
</nav>

<div class="container">
    <router-outlet></router-outlet>
</div>

16)lets say you have created "userreg" component and now you need to link the "register" link to that component from homepage. how exactly you do that?
ans)

a) Inside file "app-routing.module.ts" import the component for which you need to go to

import { UserregComponent } from './userreg/userreg.component';

b)Inside the same file there is "routes" list constant. add below JSON object inside the list.

 {
    path: 'register',
    component: UserregComponent
  }

c) basically when you click the link, it will take you to the html page for that component.


17) ok thats great that when you click link, it wil show component related to that. but first time when you come screen you need to show something right like homepage. how we do that?
ans)

a) create something default for home page like "homepage" component
ng g c homepage --spec=false

b) make sure this component is in modules.
import { HomepageComponent } from './homepage/homepage.component';

declarations: [
    AppComponent,
    UserregComponent
    ..
    ..
    HomepageComponent
  ],

 c) then in router add a entry for homepagecomponent in "app-routing.module.ts" with '' as its path. make sure you import it. so this will be shown by default when server starts. which will change when you click on link.

 {
	path: '', 
	component: UserregComponent
  },

  d)in homepage compoenent's html page. add something related to homepage.

    <div style="text-align: center;font-size: 50px;">
      welcome to Online Grocery page
    </div>

18)now we have userreg module. lets plan to add some user registration form details. create html code to create below user registration fields?

username
password
firstname
lastname
email
age
streetaddress
city
zipcode
state
country
ans)

a)

<p>User Registration Page</p>
<div class="card">
  <div class="card-body">
     <form [formGroup]="angForm" novalidate>
      <div class="form-group">
        <label class="col-md-4">User Name</label>
        <input type="text" class="form-control" formControlName="userName" />
      </div>
      <div class="form-group">
        <label class="col-md-4">Password</label>
        <input type="text" class="form-control" formControlName="password" />
      </div>
      <div class="form-group">
        <label class="col-md-4">firstname </label>
        <input type="text" class="form-control" formControlName="firstName"/>
      </div>
      <div class="form-group">
        <label class="col-md-4">lastname </label>
        <input type="text" class="form-control" formControlName="lastName"/>
      </div>
      <div class="form-group">
        <label class="col-md-4">email </label>
        <input type="text" class="form-control" formControlName="email"/>
      </div>
      <div class="form-group">
        <label class="col-md-4">age </label>
        <input type="text" class="form-control" formControlName="age"/>
      </div>
      <div class="form-group">
        <label class="col-md-4">streetaddress </label>
        <input type="text" class="form-control" formControlName="streetAddress"/>
      </div>
      <div class="form-group">
        <label class="col-md-4">city </label>
        <input type="text" class="form-control" formControlName="city"/>
      </div>
      <div class="form-group">
        <label class="col-md-4">zipcode </label>
        <input type="text" class="form-control" formControlName="zipcode"/>
      </div>
       <div class="form-group">
        <label class="col-md-4">state </label>
        <input type="text" class="form-control" formControlName="state"/>
      </div>
       <div class="form-group">
        <label class="col-md-4">country </label>
        <input type="text" class="form-control" formControlName="country"/>
      </div>
      <div class="form-group">
        <button (click)="registerUser('userName.value')" class="btn btn-primary">Register</button>
      </div>
    </form>
  </div>
</div>

b) we have to make sure we have created the mapping to this formcontrolname is ts file by adding below things.
1) add imports
import { FormGroup,  FormBuilder,  Validators } from '@angular/forms';

2)define the form name variable

  angForm: FormGroup;

3)in constructor call a new method which builds form group

 constructor(private fb: FormBuilder) {
    this.createForm();
  }

4)create the form

 createForm() {
    this.angForm = this.fb.group({
      userName: [''],
      password: [''],
      lastName: [''],
      firstName:[''],
      email: [''],
      age: [''],
      streetAddress: [''],
      city: [''],
      zipcode: [''],
      state: [''],
      country: [''],
    });
  }

5)make sure in app.module.ts we have below imports... as it is required for form.

import { FormsModule, ReactiveFormsModule } from '@angular/forms';

In imports make sure both of above are added.

imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    ReactiveFormsModule
  ],


Now you must be able to see the texbox workign without any errors in console.


19) now given that form is ready , make sure when submit button is clicked, we call a method in "userreg.component.ts" and we pass all parameters and the values are logged in console in ts file in some method?
ans)

a) for all elements in form just add #<fieldname> as shown below for username 
<input type="text" class="form-control" formControlName="userName" #userName/>

b) in  submit button call the method "registerUser" to be create in ts file by using (click) event.
 <div class="form-group">
        <button (click)="registerUser(userName.value,password.value,firstName.value,lastName.value,email.value,age.value,streetAddress.value,
        city.value,zipcode.value,state.value,country.value)" class="btn btn-primary">Register</button>
      </div>
c)add a method in ts file named "registerUser" and log all the field values so that we know we getting values in ts file.

  registerUser(userName,password,lastName,firstName,email,age,streetAddress,city,zipcode,state,country) {
    console.log(userName);
    console.log(password);
    console.log(lastName);
    console.log(firstName);
    console.log(email);
    console.log(age);
    console.log(streetAddress);
    console.log(city);
    console.log(zipcode);
    console.log(state);
    console.log(country);
  }


20) create a new service userregbuisnessservice which will make backend calls to save data to DB.Also explain what files will be created .
also update app.module as unlike component, services are not automatically imported in your modules.
ans)
a) run below command
ng g service userRegBuisnessService --spec=false

b) below file will be created
src/app/user-reg-buisness-service.service.ts

c)import the UserRegBuisnessServiceService file into the app.module.ts file.
import { UserRegBuisnessServiceService } from './user-reg-buisness-service.service';

providers: [ UserRegBuisnessServiceService ],

21) create registerUser method in UserRegBuisnessServiceService which must make backend call to insert user into DB?
ans)

a) in module add httpclientmodule
import { HttpClientModule } from '@angular/common/http';

 imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    ReactiveFormsModule,
    HttpClientModule
  ],

b)in service file add below
import { HttpClient } from '@angular/common/http';

c)update constructor
constructor(private http: HttpClient) { }

d)
 registerUser(userName,password,lastName,firstName,email,age,streetAddress,city,zipcode,state,country) {
    const obj = {
      userName: userName,
      password: password,
      lastName: lastName,
      firstName: firstName,
      email: email,
      age: age,
      streetAddress: streetAddress,
      city: city,
      zipcode: zipcode,
      state: state,
      country: country,
    };
    this.http.post(`http://localhost:8080/signup`, obj)
        .subscribe(res => console.log('Done'));
  }

22) import UserRegBuisnessServiceService in usercomponent ts file and call registerUser method in service class from there.
ans)
a)update constructor

 constructor(private fb: FormBuilder, private bs: UserRegBuisnessServiceService) {
    this.createForm();
  }

b)remove console.log in registerUser method in ts file and add same in service.

c) make sure u getting values in service after making call from ts file
this.userservice.registerUser(userName,password,lastName,firstName,email,age,streetAddress,city,zipcode,state,country);


23) create backend to make sure user information is stored in backend.
ans)
Create backend code.

Controller:
@CrossOrigin(origins = "http://localhost:4200")
  @RequestMapping(value = "/signup", method = RequestMethod.POST)
  public ResponseEntity<UserForm> save(@RequestBody UserForm userForm) {
    System.out.println(userForm);
    UserForm savedUserForm = userRegistrationService.save(userForm);
      return ResponseEntity.status(HttpStatus.OK).body(savedUserForm);
  }

Service:
public UserForm save(UserForm userForm) {
    User user = new User();
    BeanUtils.copyProperties(userForm, user);
    User savedUser = userRegistrationRepository.save(user);
    userForm.setId(savedUser.getId());
    return userForm;
  }


24)once you can see user is being created in database. next we have to show user "your account is created successfully"? how can we do that?
ans)

a) first create the boolean varaiable in userreg ts file to control showing "userform" and "success message"
showUserregForm: boolean = true;

b) update userreg registeruser method to update the "showUserregForm" to false once user is crreated.


  registerUser(userName,password,lastName,firstName,email,age,streetAddress,city,zipcode,state,country) {
    this.userservice.registerUser(userName,password,lastName,firstName,email,age,streetAddress,city,zipcode,state,country).
    subscribe(res => {
                      this.showUserregForm = false;
                      console.log("done");
                     }
              );
  }


  c) also in user service make sure its returning the "promise" instead of logging there.


    FROM

    this.http.post(`http://localhost:8080/signup`, obj)
        .subscribe(res => console.log('Done'));

        TO

    return this.http.post(`http://localhost:8080/signup`, obj);

  d)add html code to show "user created successfully", if user is created properly. and this needs oto be shown only
  when user is created and not the first time, when you come.

  <div [hidden]="showUserregForm">
  <div>user registration successfull. Please click below to go to loing page.</div>
    <a routerLink="login" class="nav-link" routerLinkActive="active">
            Go to Login page.
    </a>
  </div>


25) can you add one more link in navigation to go to homepage, if any user wants to go there?
ans) Add one more li in "app.component.html" as shown below. since if we give empty "" in router link it goes to homepage.

<li class="nav-item">
        <a routerLink="" class="nav-link" routerLinkActive="active">
          HomePage
        </a>
      </li>

26) add one more link called "Products" in navigation and make sure "products" page is shown once you click on this link.
for now the product page can show just "Shop Products Below".
ans)

a) first create "products" component using below command.
ng g c products --spec=false

b) inside newly created "products.component.html", add below text.
Shop Products Below

c)create a mapping in "app-routing.module.ts".

import { ProductsComponent } from './products/products.component';

  {
    path: 'products',
    component: ProductsComponent
  }

d)finally add a link for same in navigation.
<li class="nav-item">
        <a routerLink="products" class="nav-link" routerLinkActive="active">
          Products
        </a>
</li>


27)now if user clicks on login he has to go to login page. that page must have 2 different fields for username and password and must have login button. once he clicks on "login" button make sure to make backend call which return success or failure
based on user present or not.
ans)

a)create "login" component using below command.
ng g c products --spec=false

b) update "app-routing.module.ts" to add a mapping for "login"

import { LoginComponent } from './login/login.component';

  {
    path: 'login',
    component: LoginComponent
  }

c) Make sure navigation is updated to have "login"  router link.


d) add a form with two fields there "username" and password. also call "authenticateUser" method in ts file for authentication.

<p><b>Login Page</b></p>
<div class="card">
  <div class="card-body">
     <form [formGroup]="loginForm" novalidate>
      <div class="form-group">
        <label class="col-md-4">User Name</label>
        <input type="text" class="form-control" formControlName="userName" #userName/>
      </div>
      <div class="form-group">
        <label class="col-md-4">Password</label>
        <input type="text" class="form-control" formControlName="password" #password/>
      </div>
   <div class="form-group">
        <button (click)="authenticateUser(userName.value,password.value)" class="btn btn-primary">Register</button>
      </div>
    </form>
  </div>
</div>

e) in ts file make sure form is intialized and you have authenticateUser method.


1) imports
import { FormGroup,  FormBuilder,  Validators } from '@angular/forms';
import { UserRegBuisnessServiceService } from '../user-reg-buisness-service.service';



2)
 loginForm: FormGroup;

3)
constructor(private fb: FormBuilder, private userservice: UserRegBuisnessServiceService) {
    this.createForm();
  }

4)
   createForm() {
    this.loginForm = this.fb.group({
      userName: [''],
      password: ['']
    });
  }

5)
  authenticateUser(userName,password) {
    this.userservice.authenticateUser(userName,password).
    subscribe(res => {
                      console.log("done");
                     }
              );
  }


f) Now update "user-reg-buisness-service.service.ts" class to make backend call for login.
 authenticateUser(userName,password) {
   console.log(userName);
   console.log(password);
   
    const obj = {
      userName: userName,
      password: password
    };
    return  this.http.post(`http://localhost:8080/authenticateUser`, obj);
  }


28)Create backend code for authenticate user.

a)UserRegistrationController:

  @CrossOrigin(origins = "http://localhost:4200")
  @RequestMapping(value = "/authenticateUser", method = RequestMethod.POST)
  public ResponseEntity<UserForm> getUserByUserNameAndPassword(@RequestBody UserForm userForm) {
    System.out.println(userForm);
    UserForm savedUserForm = userRegistrationService.getUserByUserNameAndPassword(userForm);
    if (savedUserForm.getErrorMessage() != null) {
      return ResponseEntity.status(HttpStatus.NOT_FOUND).body(savedUserForm);
    } else {
      return ResponseEntity.status(HttpStatus.OK).body(savedUserForm);
    }
  }

b)UserRegistrationService

  public UserForm getUserByUserNameAndPassword(UserForm userForm) {
    List<User> users = userRegistrationRepository.getUserByUserNameAndPassword(userForm.getUserName(),
        userForm.getPassword());
    if (users.size() != 1) {
      userForm.setErrorMessage("user/password does not exist");
      return userForm;
    } else {
      User user = users.get(0);
      BeanUtils.copyProperties(user, userForm);
      return userForm;
    }


  }

c)UserRegistrationRepository

public List<User> getUserByUserNameAndPassword(String userName,String password);

d) check in postman, if working as expected.

29) based on what backend code gave in (28), show user "products page" if successful login or "error message" if invalid login.
ans)

a) In html page add.


<div class="alert alert-danger" *ngIf="errorMessageExists">{{ errorMessage }}</div>
        

b) in ts file add.
->imports
import {Router} from '@angular/router';

->inside class
 loginForm: FormGroup;
 errorMessageExists: boolean=false;
 errorMessage: String = "";

constructor(private fb: FormBuilder, private userservice: UserRegBuisnessServiceService,private router: Router) {
    this.createForm();
  }


  authenticateUser(userName,password) {
    this.userservice.authenticateUser(userName,password).
    subscribe(res => {
                      console.log("done"),
                      this.router.navigate(['/products']);
                     },
              err => {
                     console.log('HTTP Error', err),
                    this.errorMessageExists = true,
                    this.errorMessage = err.error.errorMessage
                    }
              );
  }

30) search in google and add good footer to the project.
ans)

you can search thousand of footers in google. i searched below simple footer from below links.
https://www.jquery-az.com/bootstrap4/demo.php?ex=77.0_2                          //footer example
https://www.jquery-az.com/4-templates-bootstrap-footer-use-projects/             //footer example


a) in app.component.html add below code:

 <footer class="footer">
      <div class="container">
      <p>© chaithanya companies | Privacy Policy | Terms of Service</p>
      </div>
    </footer>


b)in app.component.css  add below code.

.footer {
    position: fixed;
    height: 55px;
    bottom: 0;
    color:#fff;
    padding-top:20px;
    width: 100%;
    background: #00003E; 
    background: -webkit-linear-gradient(to right, #31BDE6, #00003E);  
    background: linear-gradient(to right, #31BDE6, #00003E); 
    text-align:center;
}


31)make sure navigation bar is dark. search some good exmples for navbar from google.
ans)

https://www.codeply.com/go/kTGlK9Axdk/bootstrap-4-navbar-center-links-examples

copy below code in navigation code in "app.component.html" page.
 
<nav class="navbar navbar-dark navbar-expand-md bg-dark justify-content-between">
    <div class="container-fluid">
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".dual-nav">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="navbar-collapse collapse dual-nav w-50 order-1 order-md-0">
            <ul class="navbar-nav">
                <li class="nav-item">
                     <a routerLink="" class="nav-link" >
                      HomePage
                      </a>                
                </li>
                <li class="nav-item">
                    <a routerLink="register" class="nav-link" routerLinkActive="active">
                      Register
                    </a>
                </li>
                <li class="nav-item">
                    <a routerLink="login" class="nav-link" routerLinkActive="active">
                      Login
                    </a>
                </li>
                
                <li class="nav-item">
                     <a routerLink="products" class="nav-link" routerLinkActive="active">
                      Products
                    </a>
                </li>
             
            </ul>
        </div>
        <a href="/" class="navbar-brand mx-auto d-block text-center order-0 order-md-1 w-25">Online grocery</a>
        <div class="navbar-collapse collapse dual-nav w-50 order-2">
            <ul class="nav navbar-nav ml-auto">
                 <li class="nav-item">
                     <a routerLink="products" class="nav-link" routerLinkActive="active">
                      Logout
                    </a>
                </li>
            </ul>
        </div>
    </div>
</nav>



32) now we have to show something in products page in UI. so can you create backend code to get products from database. create some products by writing testcase.
ans)

Controller:

@CrossOrigin(origins = "http://localhost:4200")
  @RequestMapping(value = "/getAllProducts", method = RequestMethod.POST)
  public ResponseEntity<List<ProductForm>> getAllProducts() {
    return ResponseEntity.status(HttpStatus.OK).body(productService.getAllProducts());

  }

Service:

public ArrayList<ProductForm> getAllProducts() {
    Iterable<Product> productIterable = productRepository.findAll();
    ArrayList<ProductForm> productFormList = convertIterableToArrayList(productIterable);
    return productFormList;
  }
  
  public ArrayList<ProductForm> convertIterableToArrayList(Iterable<Product> productIterable) {
    ArrayList<ProductForm> productFormList = new ArrayList<ProductForm>();
    for (Product temp : productIterable) {
      ProductForm productForm = new ProductForm();
      BeanUtils.copyProperties(temp, productForm);
      productFormList.add(productForm);
    }

    return productFormList;
  }

entity:

@Entity
@Table(name = "product")
@JsonIgnoreProperties(ignoreUnknown = true)
public class Product {

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Long id;
  private String name;
  private String brand;
  private String imageURL;
  private long price;
  private boolean inStock;
  private int maxQuantity;
  private String description;

testcase:
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
public class ProductRepositoryTest {

  @Autowired
  private ProductRepository prodRepository;

  @Test
  public void createProducts() {

    Product product1 = new Product();
    product1.setBrand("lactaid");
    product1.setDescription("lact aid milk very good");
    product1.setImageURL("");
    product1.setInStock(true);
    product1.setMaxQuantity(20);
    product1.setName("Lactaid Milk");
    product1.setPrice(12);
    
    Product product2 = new Product();
    product2.setBrand("nadhini");
    product2.setDescription("nandhini karnataka id milk very good");
    product2.setImageURL("");
    product2.setInStock(true);
    product2.setMaxQuantity(10);
    product2.setName("nandhini Milk");
    product2.setPrice(18);
    
  
    Product product3 = new Product();
    product3.setBrand("tommy hillfiger");
    product3.setDescription("best suit for marriages");
    product3.setImageURL("");
    product3.setInStock(true);
    product3.setMaxQuantity(5);
    product3.setName("tomm hillger suit");
    product3.setPrice(5000);
    
    Product product4 = new Product();
    product4.setBrand("mac");
    product4.setDescription("mac airbook laptop config 16 gb");
    product4.setImageURL("");
    product4.setInStock(true);
    product4.setMaxQuantity(32);
    product4.setName("mac airbook");
    product4.setPrice(149000);
    
    Product product5 = new Product();
    product5.setBrand("samsung");
    product5.setDescription("samsung mobile configuration");
    product5.setImageURL("");
    product5.setInStock(true);
    product5.setMaxQuantity(32);
    product5.setName("samsung mobile");
    product5.setPrice(30000);
    
    Product product6 = new Product();
    product6.setBrand("nokia");
    product6.setDescription("nokia mobile configuration");
    product6.setImageURL("");
    product6.setInStock(false);
    product6.setMaxQuantity(32);
    product6.setName("nokia mobile");
    product6.setPrice(25000);
  
    prodRepository.save(product1);
    prodRepository.save(product2);
    prodRepository.save(product3);
    prodRepository.save(product4);
    prodRepository.save(product5);
    prodRepository.save(product6);
    

  }

}


33) create front end code for showing products in front end ?
ans)

a)create a service name product using "ng g service product"

b)Inside product service have below code.

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
@Injectable({
  providedIn: 'root'
})
export class ProductService {

  constructor(private http: HttpClient) { }

  getAllProducts(){
    
    console.log("chetu inside ProductService")
     return this.http.get(`http://localhost:8080/getAllProducts`);

   
  }
}

c) inside product component ts file have below code.

import { Component, OnInit } from '@angular/core';
import { ProductService } from '../product.service';
import Product from '../product';
@Component({
  selector: 'app-products',
  templateUrl: './products.component.html',
  styleUrls: ['./products.component.css']
})
export class ProductsComponent implements OnInit {

  productsList: any = [];

  constructor(private productService: ProductService) {
      this.getAllProducts()
   }

  ngOnInit() {
  }


  getAllProducts(){
    this.productService.getAllProducts().
    subscribe(res => {
                      this.productsList = res;
                     }
              );
  }
}


d) create a model named "product.ts" in app folder.

export default class Product {
      id: Number;
        name: String;
        brand: String;
        imageURL: String;
        price: Number;
        inStock: boolean;
        maxQuantity: Number;
        description: String
}

e)create following code in product html page.

Shop Products Below

<table class="table table-hover">
  <tr>
      <th>id</th>
      <th>name</th>
      <th>brand</th>
      <th>imageURL</th>
      <th>price</th>
    <th>inStock</th>
    <th>maxQuantity</th>
    <th>description</th>
    <th>Buy</th>
  </tr>
    <tbody>
      <tr *ngFor="let product of productsList">
          <td>{{ product.id }}</td>
          <td>{{ product.name }}</td>
          <td>{{ product.brand }}</td>
          <td>{{ product.iamgeURL }}</td>
          <td>{{ product.price }}</td>
          <td>{{ product.inStock }}</td>
          <td>{{ product.maxQuantity }}</td>
          <td>{{ product.description }}</td>        
          <td><a [routerLink]="['/add', '2']" class="btn btn-primary">Buy Product</a></td>
      </tr>
  </tbody>
</table>


34) now we have footer code in app.component.html page. can you create a seprate compoenent called footer and have the code there and
include footer.component in the app.component.
ans)

a)ceate a new component named "footer"
ng g c footer --spec=false

b)move all footer html code and css from app.compoenent.html to "footer" component.

c)add below code at bottom of the page in app.compoenent.html.
 <app-footer></app-footer>


35)Now we have header code in app.component.html page. can you create a seprate compoenent called header and have the code there and
include header.component in the app.component.

ans)

a)ceate a new component named "header"
ng g c header --spec=false

b)move all navigation code html code and css from app.compoenent.html to "header" component.

c)add below code at bottom of the page in app.compoenent.html.
 <app-header></app-header>

 36) now when you click on "Buy" button, you need to take user to product detail page and show that particular product details
 in product detail page. but for now just go to that page and make sure the id is passed in product detail ts file.
 ans)

 a) ceate a new component named "productdetail" using command "ng g c productdetail --spec=false"

b) then in router add a entry for productdetail in "app-routing.module.ts" with 'productdetail' as its path. 
{
path: 'productdetail/:id', 
  component: ProductdetailComponent
  }

  c)make sure you pass id in products page as shown below.

<td><a [routerLink]="['/productdetail',product.id]" class="btn btn-primary">Buy Product</a></td>


d) now to get id in product details 

import { ActivatedRoute } from '@angular/router'

  constructor(activatedRoute: ActivatedRoute) { 
      console.log("anand...");
    console.log(activatedRoute.snapshot.paramMap.get("id"));
  }
  


37) now since you got id in product detail ts file, make a call to backend to get product details for that id and display 
thr product details in proecut details html file.
ans)

for sample prod detail page:

https://bootsnipp.com/snippets/56bAW

BACKEND:
Controller:

  @CrossOrigin(origins = "http://localhost:4200")
  @RequestMapping(value = "/getProduct", method = RequestMethod.POST)
  public ResponseEntity<ProductForm> getProduct(@RequestParam(name = "id") String productId) {

    ProductForm productForm = productService.getProduct(productId);
    return ResponseEntity.status(HttpStatus.OK).body(productForm);

  }


  service:

  public ProductForm getProduct(String productId) {
    Product product = productRepository.findOne(Long.parseLong(productId));
    ProductForm form = new ProductForm();
    BeanUtils.copyProperties(product, form);
    return form;
  }

  product detail htnl page:

<h6>Product Detail Page</h6>
<div class="container">
    <div class="card">
      <div class="container-fliud">
        <div class="wrapper row">
          <div class="preview col-md-4">
            <div class="preview-pic tab-content">
              <div class="tab-pane active" id="pic-1"><img [src]="selectedProduct.imageURL"  width="300" height="300" /></div>
            </div>
          </div>

          <div class="details col-md-10">
            <h3 class="product-title">{{ selectedProduct.name }}</h3>
            <p class="product-description">{{ selectedProduct.description }}</p>
            <h4 class="price">current price: <span>RS. {{ selectedProduct.price }}</span></h4>
            <div class="action">
              <button class="btn btn-primary" type="button">add to cart</button>
              <button class="like btn btn-default" type="button"><span class="fa fa-heart"></span></button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>


  product details ts file:
  import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router'
import { ProductService } from '../product.service';
import Product from '../product';

@Component({
  selector: 'app-productdetail',
  templateUrl: './productdetail.component.html',
  styleUrls: ['./productdetail.component.css']
})
export class ProductdetailComponent implements OnInit {

 selectedProduct: any = {};
 selectedProductId: String;

  constructor(activatedRoute: ActivatedRoute,private productService: ProductService) { 
    this.selectedProductId = activatedRoute.snapshot.paramMap.get("id");
    this.getProduct();
  }
  
  ngOnInit() {

  }

    getProduct(){
      this.productService.getProduct(this.selectedProductId).
      subscribe(res => {
                        this.selectedProduct = res;
                       }
                );
    }

}

product service page:

 getProduct (id:String){
    console.log("chetu inside ProductService")
     return this.http.get(`http://localhost:8080/getProduct?id=` + id );
  }


  38) there is no back button in product detail page back ot  product screen. can you add back button.?
  ans)
  <a [routerLink]="['/products']" class="btn btn-primary">Back to Products screen</a>


  39) When user logs in add username in session and show that in header as "welcome username".
  ans)

  Trick here is we need to pass data between 2 unrellated components. (header and login). we can do that using service and emitter.

  a) create a user service using command "ng g service user"

  b) add below code in that.

import { Injectable, Component, EventEmitter, Output } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class UserService {

  @Output() getLoggedInName: EventEmitter<string> = new EventEmitter();


  constructor() { }

  setUserTOSession(userName:string){
    this.getLoggedInName.emit(userName);       
  }
}

c) in header component class add below code.
 ngOnInit() {
    this.userservice1.getLoggedInName.subscribe(name => this.changeName(name));
  }

    private changeName(name: string): void {
        this.userName = name;
    }
  ngOnDestroy() {
    this.subscription.unsubscribe();
  }

  d) in login component class set the service variable.
  
import:
import { UserService } from '../user.service';

add below to constructor:
private userservice1: UserService,

if login in successful add below code:
this.userservice1.setUserTOSession(userName);

e) finally in header html add below code:
  <li *ngIf='userName' class="nav-item">
      <a routerLink="" class="nav-link">
          welcome {{userName}}  
      </a>
  </li>

40) now we have "welcome user" functionality, let now work on logout functionality. when user clicks on logout link,
we must not see welcome "user" screen and user has to go back to homepage screen. also when we user is never logged in logout 
button must not be shown.
ans)



a) first thing is we must have logout() method in "header.component.ts" 
it must set userName to null and also redirect to homepage.

import {Router} from '@angular/router';

add "private router: Router" to constructor

add logut method.
 logout(){
    this.userName=null;
        this.router.navigate(['/']);
  }

b)in header.component.html call this method.
 <a (click)='logout()' class="nav-link">
                      Logout
 </a>

c) now we must show logout  alos when username is present or user is logged in. so change the *ngIf to "ul" which has both
"welcome user" and logut.

 <ul *ngIf='userName' class="nav navbar-nav ml-auto">
 
                <li  class="nav-item">
                    <a routerLink="" class="nav-link">
                        welcome {{userName}}  
                    </a>
                </li>
                <li  class="nav-item">
                    <a routerLink="profile" class="nav-link">
                        My Profile
                    </a>
                </li>
                 <li  class="nav-item">
                     <a (click)='logout()' class="nav-link">
                      Logout
                    </a>
                </li>
            </ul>

  d) also make sure "welcome user" is not directed to anywhere. its just information.

 <li  class="nav-item">
                    <a routerLink="#" class="nav-link">
                        welcome {{userName}}  
                    </a>
                </li>

41) if user is logged in there must be link called "my profile" before "welcome user" link. if you click on the link.
you must be able to see all details of the user in texboxes and there must be update button. if user wants to change any 
information he can change. Note that he will not be able to change his username field. he can modify any other feilds.
Do both backend and frontend required for this.
ans)

a) lets add a link "My profile"

 <li  class="nav-item">
                        <a  [routerLink]="['/profile',userName]" class="nav-link">
                            My Profile
                        </a>
                </li>

b) lets create a component called profile and add "profile" path in routes. see that we need to pass username as 
we need to fetch profile details from database.
ng g c profile --spec=false

 {
    path: 'profile/:userName', 
    component: ProfileComponent
  }

c)remove below from footer component css as below creates alignment issues.
    position: fixed;

d) in profile html page:
 <p><b>User Profile Details</b></p>
<div class="card">
  <div class="card-body">
     <form [formGroup]="userProfileForm" novalidate> 
      <div class="form-group">
        <label class="col-md-4">User Name</label>
        <input type="text" class="form-control" formControlName="userName" #userName/>
      </div>
      <div class="form-group">
        <label class="col-md-4">Password</label>
        <input type="text" class="form-control" formControlName="password" #password/>
      </div>
      <div class="form-group">
        <label class="col-md-4">firstname </label>
        <input type="text" class="form-control" formControlName="firstName" #firstName/>
      </div>
      <div class="form-group">
        <label class="col-md-4">lastname </label>
        <input type="text" class="form-control" formControlName="lastName" #lastName/>
      </div>
      <div class="form-group">
        <label class="col-md-4">email </label>
        <input type="text" class="form-control" formControlName="email" #email/>
      </div>
      <div class="form-group">
        <label class="col-md-4">age </label>
        <input type="text" class="form-control" formControlName="age" #age/>
      </div>
      <div class="form-group">
        <label class="col-md-4">streetaddress </label>
        <input type="text" class="form-control" formControlName="streetAddress" #streetAddress/>
      </div>
      <div class="form-group">
        <label class="col-md-4">city </label>
        <input type="text" class="form-control" formControlName="city" #city/>
      </div>
      <div class="form-group">
        <label class="col-md-4">zipcode </label>
        <input type="text" class="form-control" formControlName="zipcode" #zipcode/>
      </div>
       <div class="form-group">
        <label class="col-md-4">state </label>
        <input type="text" class="form-control" formControlName="state" #state/>
      </div>
       <div class="form-group">
        <label class="col-md-4">country </label>
        <input type="text" class="form-control" formControlName="country" #country/>
      </div>
      <div class="form-group">
            <button (click)="updateUser(userName.value,password.value,firstName.value,lastName.value,email.value,age.value,streetAddress.value,
            city.value,zipcode.value,state.value,country.value,userDetail.id)" class="btn btn-primary">Update</button>
      </div> 
    </form> 
  </div>
</div>
<div class="alert alert-success" *ngIf="userMessage">{{ userMessage }}</div>

e) in profile component class

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router'
import { FormGroup,  FormBuilder,  Validators } from '@angular/forms';
import { UserRegBuisnessServiceService } from '../user-reg-buisness-service.service';

@Component({
  selector: 'app-profile',
  templateUrl: './profile.component.html',
  styleUrls: ['./profile.component.css']
})
export class ProfileComponent implements OnInit {
  userName:string=null;
  userDetail:any=null;
  userProfileForm: FormGroup;
  userMessage:string=null;

  constructor(private fb: FormBuilder, activatedRoute: ActivatedRoute,  private userservice: UserRegBuisnessServiceService) { 
    this.userMessage=null;
    this.userName = activatedRoute.snapshot.paramMap.get("userName");
    this.getUserDetails(this.userName);
  }
  

 createForm(userDetail:any) {
  this.userProfileForm = this.fb.group({
    userName: [userDetail.userName],
    password: [userDetail.password],
    lastName: [userDetail.lastName],
    firstName:[userDetail.firstName],
    email: [userDetail.email],
    age: [userDetail.age],
    streetAddress: [userDetail.streetAddress],
    city: [userDetail.city],
    zipcode: [userDetail.zipcode],
    state: [userDetail.state],
    country: [userDetail.country],
  });
}

  ngOnInit() {
  }

  getUserDetails(userName:string){
    this.userservice.getUserDetails(userName).
    subscribe(res => {
                      console.log(res);
                      this.userDetail = res;
                      this.createForm(this.userDetail);
                     }
              );

  }

  updateUser(userName,password,lastName,firstName,email,age,streetAddress,city,zipcode,state,country,id) {
  	this.userservice.updateUser(userName,password,lastName,firstName,email,age,streetAddress,city,zipcode,state,country,id).
    subscribe(res => {
                      console.log('anand..')
                      this.createForm(res);
                      this.userMessage="user updated successfully";
                     }
              );
  }

}

f) in service class

updateUser(userName,password,lastName,firstName,email,age,streetAddress,city,zipcode,state,country,id) {
    const obj = {
      id:id,
      userName: userName,
      password: password,
      lastName: lastName,
      firstName: firstName,
      email: email,
      age: age,
      streetAddress: streetAddress,
      city: city,
      zipcode: zipcode,
      state: state,
      country: country,
    };

    return  this.http.post(`http://localhost:8080/signup`, obj);
  }

  g) In user reg controller

	@CrossOrigin(origins = "http://localhost:4200")
	@RequestMapping(value = "/getUserDetails", method = RequestMethod.GET)
	public ResponseEntity<UserForm> getUserDetails(@RequestParam(name = "userName") String userName) {
		UserForm userForm = userRegistrationService.getUserByUserName(userName);
		if (userForm.getErrorMessage() != null) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(userForm);
		} else {
			return ResponseEntity.status(HttpStatus.OK).body(userForm);
		}

	}

  h) in service:
  	public UserForm getUserByUserName(String userName) {
		UserForm userForm = new UserForm();
		List<User> users = userRegistrationRepository.getUserByUserName(userName);
		if (users.size() != 1) {
			userForm.setErrorMessage("user/password does not exist");
			return userForm;
		} else {
			User user = users.get(0);
			BeanUtils.copyProperties(user, userForm);
			return userForm;
		}

	}
	
i) in user repository:
public List<User> getUserByUserName(String userName);
	
Now you must see we can update the profile successfully.

42) In products screeen, show products only if user is logged in. otherwise show "Please login to see Products"

ans)















